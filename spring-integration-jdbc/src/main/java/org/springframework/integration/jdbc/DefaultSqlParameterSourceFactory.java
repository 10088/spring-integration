/*
 * Copyright 2002-2010 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package org.springframework.integration.jdbc;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.DirectFieldAccessor;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

/**
 * A default implementation of {@link SqlParameterSourceFactory} which creates an {@link SqlParameterSource} according
 * to the type of the data passed in.
 * 
 * <ul>
 * <li>
 * Where the data is a List, a list of ids is generated by looking for a map entry or bean property named by default
 * 'id'. The resulting {@link SqlParameterSource} is a map that contains this list under a default key of 'idList'.</li>
 * <li>
 * Where the data is a {@link Map}, this is wrapped in an instance of {@link MapSqlParameterSource}.</li>
 * <li>
 * Otherwise the result is wrapped in a {@link BeanPropertySqlParameterSource}.</li>
 * </ul>
 * 
 * @author Jonas Partner
 * @author Dave Syer
 * @since 2.0
 */
public class DefaultSqlParameterSourceFactory implements SqlParameterSourceFactory {

	private final Log logger = LogFactory.getLog(getClass());

	private Map<String, Object> staticParameters;

	private String rowIdName = "id";

	private String idsParamName = "idList";

	public DefaultSqlParameterSourceFactory() {
		this.staticParameters = Collections.unmodifiableMap(new HashMap<String, Object>());
	}

	/**
	 * Name of the id property in the input elements when the input data is List. Defaults to "id".
	 *  If the input is not a List then this value is ignored.
	 * @param rowIdName the name to set 
	 */
	public void setRowIdName(String rowIdName) {
		this.rowIdName = rowIdName;
	}

	/**
	 * Name of the id list in the output parameters if the input is a List (default "idList"). If the input is not a
	 * List then this value is ignored.
	 * 
	 * @param idsParamName the name to set
	 */
	public void setIdsParameterName(String idsParamName) {
		this.idsParamName = idsParamName;
	}

	/**
	 * If the input is a List or a Map, the output is a map parameter source, and in that case some static parameters
	 * can be added (default is empty). If the input is not a List or a Map then this value is ignored.
	 * 
	 * @param staticParameters the static parameters to set
	 */
	public void setStaticParameters(Map<String, Object> staticParameters) {
		this.staticParameters = staticParameters;
	}

	@SuppressWarnings("unchecked")
	public SqlParameterSource createParameterSource(Object input) {
		SqlParameterSource toReturn;
		if (input instanceof List) {
			List<Object> ids = new ArrayList<Object>();
			for (Object rowObj : (List) input) {
				if (rowObj instanceof Map) {
					ids.add(((Map) rowObj).get(this.rowIdName));
				}
				else {
					DirectFieldAccessor accessor = new DirectFieldAccessor(rowObj);
					if (accessor.isReadableProperty(this.rowIdName)) {
						ids.add(accessor.getPropertyValue(this.rowIdName));
					}
					else {
						logger.warn("No id field named '" + this.rowIdName
								+ "' found for result of polled row. Update may not include all rows.");
					}
				}
			}
			MapSqlParameterSource thisParamSource = new MapSqlParameterSource();
			if (this.staticParameters != null) {
				thisParamSource.addValues(this.staticParameters);
			}
			thisParamSource.addValue(this.idsParamName, ids);
			thisParamSource.getValue("idList");
			toReturn = thisParamSource;
		}
		else if (input instanceof Map) {
			MapSqlParameterSource mapParameterSource = new MapSqlParameterSource((Map) input);
			mapParameterSource.addValues(this.staticParameters);
			toReturn = mapParameterSource;
		}
		else {
			BeanPropertySqlParameterSource beanParameterSource = new BeanPropertySqlParameterSource(input);
			toReturn = beanParameterSource;
		}
		return toReturn;
	}

}
