<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.springframework.org/schema/integration/jdbc"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:tool="http://www.springframework.org/schema/tool"
	xmlns:integration="http://www.springframework.org/schema/integration"
	targetNamespace="http://www.springframework.org/schema/integration/jdbc"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans" />
	<xsd:import namespace="http://www.springframework.org/schema/tool" />
	<xsd:import namespace="http://www.springframework.org/schema/integration"
		schemaLocation="http://www.springframework.org/schema/integration/spring-integration-2.0.xsd" />

	<xsd:annotation>
		<xsd:documentation><![CDATA[
	Defines the configuration elements for Spring Integration's JDBC components.
		]]></xsd:documentation>
	</xsd:annotation>

	<xsd:element name="message-store">
		<xsd:annotation>
			<xsd:documentation>
				Defines a MessageStore (and MessageGroupStore)
				backed by a database.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="data-source" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								Reference to a data source to use to access
								the database. Either this or the jdbc-operations
								must be
								specified (but not both).
							</xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="javax.sql.DataSource" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="jdbc-operations" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									Reference to a JdbcOperations. Either
									this or
									the data-source must be
									specified (but not both).
								</xsd:documentation>
								<tool:annotation kind="ref">
									<tool:expected-type
										type="org.springframework.jdbc.core.JdbcOperations" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="region" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								Unique string to use as a partition for the
								data in this store, so that
								multiple instances can
								share the same
								database tables. The default
								is "DEFAULT".
					</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="table-prefix" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								Prefix for the table names in the database
								(e.g. so that a schema can be specified, or to avoid
								a clash
								with
								other tables). The default is "INT_".
					</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="lob-handler" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
							Reference to a lob handler (optional).  Only override if using Oracle and
							the database type is not being detected for some reason.
							]]></xsd:documentation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type
										type="org.springframework.jdbc.support.lob.LobHandler" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="inbound-channel-adapter">
		<xsd:annotation>
			<xsd:documentation>
				Defines an inbound Channel Adapter for polling a
				database.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="jdbcType">
					<xsd:sequence>
						<xsd:element name="query" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:appinfo>
									<xsd:documentation>
										A select query to execute when a message is
										polled. In general
										the query can return multiple
										rows, because
										the result will be a List (of type determined by the
										row
										mapper).
									</xsd:documentation>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="update" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:appinfo>
									<xsd:documentation>
										An update query to execute when a message is
										polled. If the poll is in a transaction then the
										update will
										roll back if the transaction does.
									</xsd:documentation>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
						<xsd:element ref="integration:poller" minOccurs="0"
							maxOccurs="1" />
					</xsd:sequence>
					<xsd:attribute name="query" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									A select query to execute when a message is
									polled. In general the query can return multiple
									rows, because
									the result will be a List (of type determined by the row
									mapper).  The query can also be specified as a nested element.
					</xsd:documentation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="row-mapper" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									Reference to a row mapper to use to convert
									JDBC result set rows to message payloads.
									Optional
									with default
									that maps
									result set row to a map (column name to column value).
									Other simple
									use cases can
									be handled
									with out-of-the box
									implementations from Spring JDBC. Others require a custom row
									mapper.
								</xsd:documentation>
								<tool:annotation kind="ref">
									<tool:expected-type type="org.springframework.jdbc.core.RowMapper" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="update" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									An update query to execute when a message is
									polled. If the poll is in a transaction then the
									update will
									roll back if the transaction does.  The update can also be specified as a nested element.
					</xsd:documentation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="update-per-row" type="xsd:boolean"
						default="false">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									Flag to indicate whether the update query
									should be executed per message, or per row (in the
									case that a
									message contains multiple rows).
								</xsd:documentation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="channel" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									Channel to which polled messages will be
									sent.
								</xsd:documentation>
								<tool:annotation kind="ref">
									<tool:expected-type
										type="org.springframework.integration.core.MessageChannel" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="sql-query-parameter-source" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									Reference to a SqlParameterSource for the SELECT query used for polling. If
									that query has placeholders (e.g. "SELECT * from FOO where KEY=:key") they
									will be bound from this source by name.
								</xsd:documentation>
								<tool:annotation kind="ref">
									<tool:expected-type
										type="org.springframework.jdbc.core.namedparam.SqlParameterSource" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="outbound-channel-adapter">
		<xsd:annotation>
			<xsd:documentation>
				Defines an outbound Channel Adapter for updating a
				database.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="jdbcType">
					<xsd:sequence>
						<xsd:element name="query" minOccurs="0" maxOccurs="1">
							<xsd:annotation>
								<xsd:appinfo>
									<xsd:documentation>
										An SQL update query to execute (INSERT,
										UPDATE
										or DELETE). Bean properties of the outgoing
										message can be
										referenced in named parameters, e.g. "INSERT into FOOS (ID,
										NAME) values (:headers[business.key],
										:payload)". More complex
										requirements can be implemented by specifying a sql-parameter-source-factory.
									</xsd:documentation>
								</xsd:appinfo>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="query" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									An SQL update query to execute (INSERT,
									UPDATE
									or DELETE). Bean properties of the outgoing
									message can be
									referenced in named parameters, e.g. "INSERT into FOOS (ID,
									NAME) values (:headers[business.key],
									:payload)".  The query can also be specified as a nested element.
						</xsd:documentation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="channel" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:appinfo>
								<xsd:documentation>
									Channel from which messages will be output.
									When a message is sent to this channel it will
									cause the query
									to be executed.
								</xsd:documentation>
								<tool:annotation kind="ref">
									<tool:expected-type
										type="org.springframework.integration.core.MessageChannel" />
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="jdbcType">
		<xsd:attribute name="data-source" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Reference to a data source to use to access
					the
					database. Either this or the
					simple-jdbc-operations
					must be
					specified
					(but not both).
							</xsd:documentation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="javax.sql.DataSource" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="jdbc-operations" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<xsd:documentation>
						Reference to a JdbcOperations. Either
						this or
						the
						data-source must be
						specified (but not both).
					</xsd:documentation>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.jdbc.core.JdbcOperations" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="sql-parameter-source-factory" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<xsd:documentation>
						Reference to a SqlParameterSourceFactory. For an
						inbound adapter the input is the result of the
						query, and for an
						outbound adapter the input is the whole outgoing message. The
						default factory creates a bean
						property parameter source for a
						generic input (like a Message), and treats a List in a special
						way: the List is
						assumed to contain entities with a field called
						"id" and these are collected and copied to a field in the
						parameter source called "idList".
					</xsd:documentation>
					<tool:annotation kind="ref">
						<tool:expected-type
							type="org.springframework.integration.jdbc.SqlParameterSourceFactory" />
					</tool:annotation>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

</xsd:schema>