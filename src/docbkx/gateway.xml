<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="gateway">
  <title>Inbound Messaging Gateways</title>

  <section id="gateway-proxy">
    <title>GatewayProxyFactoryBean</title>
    <para>
      Working with Objects instead of Messages is an improvement. However, it would be even better to have no
      dependency on the Spring Integration API at all - including the gateway class. For that reason, Spring
      Integration also provides a <classname>GatewayProxyFactoryBean</classname> that generates a proxy for
      any interface and internally invokes the gateway methods shown above. Namespace support is also
      provided as demonstrated by the following example.
      <programlisting language="xml"><![CDATA[<gateway id="fooService"
         service-interface="org.example.FooService"
         default-request-channel="requestChannel"
         default-reply-channel="replyChannel"/>]]></programlisting>
      Then, the "fooService" can be injected into other beans, and the code that invokes the methods on that
      proxied instance of the FooService interface has no awareness of the Spring Integration API. The general
      approach is similar to that of Spring Remoting (RMI, HttpInvoker, etc.). See the "Samples" Appendix for
      an example that uses this "gateway" element (in the Cafe demo).
	</para>
    <para>
      The reason that the attributes on the 'gateway' element are named 'default-request-channel' and
      'default-reply-channel' is that you may also provide per-method channel references by using the
      @Gateway annotation.
      <programlisting language="java"><![CDATA[ public interface Cafe {

     @Gateway(requestChannel="orders")
     void placeOrder(Order order);

 }]]></programlisting>
    </para>
    <para>
      It is also possible to pass values to be interpreted as Message headers on the Message
      that is created and sent to the request channel by using the @Header annotation:
	  <programlisting language="java"><![CDATA[ public interface FileWriter {

     @Gateway(requestChannel="filesOut")
     void write(byte[] content, @Header(FileHeaders.FILENAME) String filename);

 }]]></programlisting>
    </para>
    
    <para>
    If you prefer XML way of configuring Gateway methods, you can provide <emphasis>method</emphasis> sub-elements 
    to the gateway configuration (see below) 
     <programlisting language="xml"><![CDATA[<si:gateway id="myGateway" service-interface="org.foo.bar.TestGateway"
			default-request-channel="inputC">
	<si:method name="echo" request-channel="inputA" reply-timeout="2" request-timeout="200"/>
    	<si:method name="echoUpperCase" request-channel="inputB"/>
    	<si:method name="echoViaDefault"/>
</si:gateway>]]></programlisting> 
    </para>
    <para>
    	You can also provide individual headers per method invocation via XML. 
    	This could be very useful if headers you want to set are static in nature and you don't want 
    	to embed them in the gateway's method signature via <classname>@Header</classname> annotation. 
    	For example; in the Loan Broker example we want to influence how aggregation of the Loan quotes 
    	will be done based on what type of request was initiated (single quote or all quotes). Determining the 
    	type of the request by evaluating what gateway's method was invoked, although possible would 
    	violate the separation of concerns paradigm (method is a java artifact),  but expressing your 
    	intention (meta information) via Message headers is natural to Messaging architecture.
    	
    	<programlisting language="xml"><![CDATA[<int:gateway id="loanBrokerGateway" 
    	   service-interface="org.springframework.integration.loanbroker.LoanBrokerGateway">
	<int:method name="getLoanQuote" request-channel="loanBrokerPreProcessingChannel">
		<int:header name="RESPONSE_TYPE" value="BEST"/>
	</int:method>
	<int:method name="getAllLoanQuotes" request-channel="loanBrokerPreProcessingChannel">
		<int:header name="RESPONSE_TYPE" value="ALL"/>
	</int:method>
</int:gateway>]]></programlisting> 
	In the above case you can clearly see how a different header value will be set for the 'RESPONSE_TYPE' 
	header based on the gateway's method.
    </para>
    <para>
    As with anything else, Gateway invocation might result in error.
    By default all error that have occurred downstream will be re-thrown as MessagingExeption (RuntimeException) 
    upon Gateway's method invocation. However there are times when you may want to treat Exception as a valid reply, 
    by mapping it to a Message. To accomplish this Gateway provides support for Exception mappers via <emphasis>exception-mapper</emphasis> 
    attribute. 
    </para>
<programlisting language="xml"><![CDATA[<si:gateway id="sampleGateway"
		default-request-channel="gatewayChannel" 
		service-interface="foo.bar.SimpleGateway"
		exception-mapper="exceptionMapper"/>
				
<bean id="exceptionMapper" class="foo.bar.SampleExceptionMapper"/>
				
				]]></programlisting>
				
	<emphasis>foo.bar.SampleExceptionMapper</emphasis> is the implementation of 
	<emphasis>org.springframework.integration.message.InboundMessageMapper</emphasis> which only defines one method <code>toMessage(Object object)</code>.
<programlisting language="java"><![CDATA[public static class SampleExceptionMapper implements InboundMessageMapper<Throwable>{
	public Message<?> toMessage(Throwable object) throws Exception {
		MessageHandlingException ex = (MessageHandlingException) object;		
		return MessageBuilder.withPayload("Error happened in message: " + 
		            ex.getFailedMessage().getPayload()).build();
	}
		
}
				]]></programlisting>	
 
 
  </section>
  <section id="async-gateway">
    <title>Asynchronous Gateway</title>
    <para>
      As a pattern Messaging Gateway is a very nice way to hide you from messaging-specific code while still exposing full capabilities of the 
      messaging system. And <classname>GatewayProxyFactoryBean</classname> provides a convenient way to expose Proxy over the service-interface thus giving you a POJO-based access 
      to a messaging system.  But when gateway is exposed via simple POJO method which returns value it does imply that for each Request message (method is invoked) 
      there must be a Reply message (method has returned). Since Messaging systems naturally are asynchronous you may not always able to 
      guarantee the contract where <emphasis>"for each request there will always be be a reply"</emphasis>. 
      With Spring Integration 2.0 we are introducing an <emphasis>Asynchronous Gateway</emphasis> which is a convenient way to initiate flows where you may not know 
      if reply is coming or how long will it take for it to come. 
      </para>
      <para>
      A natural way to handle these types of scenarios in Java would be <emphasis>java.util.concurrent.Future</emphasis>s and that is exactly what Spring Integration uses to create an <emphasis>Asynchronous Gateway</emphasis>.
      </para>
      <para>
	  From the XML configuration, there is nothing different and you still define <emphasis>Asynchronous Gateway</emphasis> the same way as regular Gateway
      <programlisting language="xml"><![CDATA[<int:gateway id="mathService" 
     service-interface="org.springframework.integration.sample.gateway.futures.MathServiceGateway"
     default-request-channel="requestChannel"/>]]></programlisting>
      However the Gateway Interface (service-interface) is a bit different.
      
      <programlisting language="java">public interface MathServiceGateway {
	Future&lt;Integer&gt; multiplyByTwo(int i);
}</programlisting>
    </para>
    <para>
    As you can see from the example above the return type for the gateway method is <classname>Future</classname>. When <classname>GatewayProxyFactoryBean</classname> sees that the 
    return type of the gateway method is <classname>Future</classname> it immediately switches to the async mode by utilizing <classname>AsyncTaskExecutor</classname>
    That is all. The call to a method always returns immediately with <classname>Future</classname> encapsulating  the interaction with the framework. 
    Now you can interact with the <classname>Future</classname> at your own pace to get the result, timeout, get the exception etc...
    <programlisting language="java">MathServiceGateway mathService = ac.getBean("mathService", MathServiceGateway.class);
Future&lt;Integer&gt; result = mathService.multiplyByTwo(number);
int finalResult =  result.get(1000, TimeUnit.SECONDS);</programlisting>
For more detailed example please refer to <emphasis>async-gateway</emphasis> sample distributed with Spring Integration samples.
    </para>
    
  </section>

</chapter>