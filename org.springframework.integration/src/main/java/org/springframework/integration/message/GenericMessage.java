/*
 * Copyright 2002-2008 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.integration.message;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.springframework.integration.core.Message;
import org.springframework.integration.core.MessageHeaders;
import org.springframework.util.Assert;

/**
 * Base Message class defining common properties such as id, payload, and headers.
 * 
 * @author Mark Fisher
 */
public class GenericMessage<T> implements Message<T>, Serializable {

	private volatile T payload;

	private final MessageHeaders headers;


	/**
	 * Create a new message with the given payload. The id will be generated by
	 * the default {@link IdGenerator} strategy.
	 * 
	 * @param payload the message payload
	 */
	public GenericMessage(T payload) {
		this(payload, null);
	}

	/**
	 * Create a new message with the given payload. The id will be generated by
	 * the default {@link IdGenerator} strategy. The headers will be populated
	 * with the provided header values.
	 * 
	 * @param payload the message payload
	 * @param headers message headers
	 */
	public GenericMessage(T payload, Map<String, Object> headers) {
		Assert.notNull(payload, "payload must not be null");
		if (headers == null) {
			headers = new HashMap<String, Object>();
		}
		else {
			headers = new HashMap<String, Object>(headers);
		}
		this.headers = new MessageHeaders(headers);
		this.payload = payload;
	}


	public MessageHeaders getHeaders() {
		return this.headers;
	}

	public T getPayload() {
		return this.payload;
	}

	public String toString() {
		return "[Payload=" + this.payload + "][Headers=" + this.headers + "]";
	}

}
