/*
 * Copyright 2002-2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.integration.handler;

import org.springframework.core.Ordered;
import org.springframework.integration.message.Message;
import org.springframework.integration.util.SimpleMethodInvoker;

/**
 * An implementation of {@link MessageHandler} that invokes the specified method
 * on the provided target object. If {@link #shouldUseMapperOnInvocation} is set
 * to <code>true</code> (the default), it will use the provided
 * {@link org.springframework.integration.message.MessageMapper} strategy to
 * convert the inbound {@link Message} to an object that will be passed as the
 * method parameter. If the method has a non-null return value, a reply message
 * will be generated by the mapper.
 * 
 * @author Mark Fisher
 */
public class DefaultMessageHandlerAdapter<T> extends AbstractMessageHandlerAdapter<T> implements Ordered {

	private boolean expectsMessage = false;

	/**
	 * Specify whether the handler should pass the message when invoking the
	 * target method. The default is <code>false</code> indicating that the
	 * message's <em>payload</em> should be passed as the argument. To force
	 * passing the {@link Message} directly, set this to <code>true</code>.
	 */
	public void setExpectsMessage(boolean expectsMessage) {
		this.expectsMessage = expectsMessage;
	}

	public Object doHandle(Message message, SimpleMethodInvoker invoker) {
		if (this.expectsMessage) {
			return invoker.invokeMethod(message);
		}
		return invoker.invokeMethod(message.getPayload());
	}

}
