/*
 * Copyright 2002-2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.integration.endpoint;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.integration.handler.MessageHandler;
import org.springframework.integration.message.Message;
import org.springframework.integration.message.MessageMapper;
import org.springframework.util.Assert;

/**
 * An implementation of {@link MessageHandler} that invokes the specified method
 * on the provided target object. It then uses a {@link MessageMapper} strategy
 * for converting the object to a {@link Message}. If the method has a non-null
 * return value, a reply message will be generated by the mapper.
 * 
 * @author Mark Fisher
 */
public class MessageHandlerAdapter<T> implements MessageHandler, InitializingBean {

	private T object;

	private String method;

	private MessageMapper mapper;

	private SimpleMethodInvoker<T> invoker;


	public void setObject(T object) {
		Assert.notNull(object, "'object' must not be null");
		this.object = object;
	}

	public void setMethod(String method) {
		Assert.notNull(method, "'method' must not be null");
		this.method = method;
	}

	public void afterPropertiesSet() {
		this.invoker = new SimpleMethodInvoker<T>(this.object, this.method);
	}

	public Message handle(Message message) {
		Object result = this.invoker.invokeMethod(this.mapper.fromMessage(message));
		if (result != null) {
			return this.mapper.toMessage(result);
		}
		return null;
	}

}
