<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xml:id="control-bus"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:ns5="http://www.w3.org/1999/xhtml"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook">
  <title>Control Bus</title>

  <para>As described in (EIP), the idea behind the Control Bus is that the
  same messaging system can be used for monitoring and managing the components
  within the framework as is used for "application-level" messaging. In Spring
  Integration we build upon the adapters described above so that it's possible
  to send Messages as a means of invoking exposed operations.</para>

  <programlisting language="xml">&lt;control-bus input-channel="operationChannel"/&gt;</programlisting>

  <para>The Control Bus has an input channel that can be accessed for invoking
  operations on the beans in the application context. It also has all the
  common properties of a service activating endpoint, e.g. you can specify an
  output channel if the result of the operation has a return value that you
  want to send on to a downstream channel.</para>

  <para>The Control Bus executes messages on the input channel as Spring
  Expression Language expressions. It takes a message, compiles the body to an
  expression, adds some context, and then executes it. The default context
  just exposes all the beans in the application context by name with the usual
  SpEL prefix for beans (@). So to execute a method on a Spring Bean a client
  would send a message to the operation channel:</para>

  <programlisting>Message operation = MessageBuilder.withPayload("@myServiceBean.shutdown()");
operationChannel.send(operation)</programlisting>

  <para>The root of the context for the expression is the
  <classname>Message</classname> itself, so you also have access to the body
  and headers, the same as all the other expressions in Spring Integration
  endpoints.</para>

  <para>The execution context for the expressions can be customized by
  providing a <classname>BeanResolver</classname> instance:</para>

  <programlisting language="xml">&lt;control-bus input-channel="operationChannel" bean-resolver="beanResolver"/&gt;
&lt;beans:bean class="com.mycompany.MyCustomBeanResolver"/&gt;</programlisting>
</section>
