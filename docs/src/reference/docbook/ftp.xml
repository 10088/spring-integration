<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ftp"
    xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>FTP/FTPS Adapters</title>
  <para>
    Spring Integration provides support for file transfer operations via FTP and FTPS
  </para>
  <section id="ftp-intro">
    <title>Introduction</title>
    <para>
      File Transfer Protocol (FTP) is a simple network protocol which allows you to transfer files between two computers on the Internet.
    </para>
    <para>
    There are two actors when it comes to FTP communication - <emphasis>client</emphasis> and <emphasis>server</emphasis>. 
    To transfer files with FTP/FTPS, you use <emphasis>client</emphasis> which initiates a connection to a remote computer 
    running an FTP <emphasis>server</emphasis> software. After the connection is established, the <emphasis>client</emphasis> can choose 
    to send and/or receive copies of files. 
    </para>
    
     <para>
    Spring Integration supports sending and receiving files over FTP/FTPS by providing two types of <emphasis>client</emphasis>s - 
    <emphasis>Inbound Channel Adapters</emphasis> and <emphasis>Outbound Channel Adapters</emphasis> as well as convenient 
    namespace configuration to define these <emphasis>client</emphasis>s.
    </para>
    <para>
    	<emphasis>FTP</emphasis>
    	<programlisting language="xml"><![CDATA[xmlns:ftp="http://www.springframework.org/schema/integration/ftp"
xsi:schemaLocation="http://www.springframework.org/schema/integration/ftp 
	http://www.springframework.org/schema/integration/ftp/spring-integration-ftp-2.0.xsd" 
]]></programlisting>
    </para>
  </section>
  
  
  <section id="ftp-session-factory">
  	<title>FTP Session Factory</title>
  	<para>
  	Before configuring FTP adapters you must configure <emphasis>Ftp Session Factory</emphasis>. You configure 
  	<emphasis>Ftp Session Factory</emphasis> via regular bean configuration by configuring <classname>org.springframework.integration.ftp.session.DefaultFtpSessionFactory</classname>:
	Below is a basic configuration:
	
	<programlisting language="xml"><![CDATA[<bean id="ftpClientFactory" class="org.springframework.integration.ftp.session.DefaultFtpSessionFactory">
		<property name="host" value="localhost"/>
		<property name="port" value="22"/>
		<property name="username" value="kermit"/>
		<property name="password" value="frog"/>
		<property name="clientMode" value="0"/>
		<property name="fileType" value="2"/>
</bean>]]></programlisting>
	</para>
	<para>
	For FTPS connections all you need to do is use <classname>org.springframework.integration.ftp.session.DefaultFtpsSessionFactory</classname>.
	Below is the complete configuration sample:
	
	<programlisting language="xml"><![CDATA[<bean id="ftpClientFactory" class="org.springframework.integration.ftp.client.DefaultFtpsClientFactory">
		<property name="host" value="localhost"/>
		<property name="port" value="22"/>
		<property name="username" value="oleg"/>
		<property name="password" value="password"/>
		<property name="clientMode" value="1"/>
		<property name="fileType" value="2"/>
		<property name="useClientMode" value="true"/>
		<property name="cipherSuites" value="a,b.c"/>
		<property name="keyManager" ref="keyManager"/>
		<property name="protocol" value="SSL"/>
		<property name="trustManager" ref="trustManager"/>
		<property name="prot" value="P"/>
		<property name="needClientAuth" value="true"/>
		<property name="authValue" value="oleg"/>
		<property name="sessionCreation" value="true"/>
		<property name="protocols" value="SSL, TLS"/>
		<property name="implicit" value="true"/>
</bean>]]></programlisting>
	</para>

	<para>
	Now all you need to do is inject these session factories into your adapters. Obviously the protocol (FTP or FTPS) adapter will 
	use depends on the type of session factory that's been injected into the adapter.
  	</para>
  	<para>
  	<note>
  	A more practical way to provide values for <emphasis>Ftp/Ftps Session Factory</emphasis> would be via Spring's property 
  	placeholder (http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-placeholderconfigurer)	
  	</note>
  </para>
  </section>
  
  <section id="ftp-inbound">
  	<title>FTP Inbound Channel Adapter</title>
  	<para>
  	<emphasis>FTP Inbound Channel Adapter</emphasis> is a special listener that will connect to the FTP server and will listen 
  	for the remote directory events (e.g., new file created) at which point it will initiate a file transfer.
  	
  	<programlisting language="xml"><![CDATA[<int-ftp:inbound-channel-adapter id="ftpInbound"
				channel="ftpChannel" 
				session-factory="ftpSessionFactory"
				charset="UTF-8"
				auto-create-local-directory="true"
				delete-remote-files="true"
				filename-pattern="*.txt"
				local-working-directory=".">
			<int:poller fixed-rate="1000"/>
</int-ftp:inbound-channel-adapter>]]></programlisting>

	As you can see form the configuration above you can configure <emphasis>FTP Inbound Channel Adapter</emphasis> via <code>inbound-channel-adapter</code> 
	element while also providing values for various attributes such as <code>local-working-directory</code>, <code>filename-pattern</code> 
	(based on simple pattern matching - not regex) and of course the reference to a <code>session-factory</code>.
	
	Some times file filtering based on the simple pattern specified via <code>filename-pattern</code> attribute might not be 
	sufficient enough. If this is the case, you can use <code>filename-regex</code> attribute to specify Regular expression 
	(e.g. <code>filename-regex=".*\.test$"</code>). And of course if you need complete control you can use <code>filter</code> 
	attribute and provide reference to a custom implementation of the 
	<classname>org.springframework.integration.file.filters.FileListFilter</classname> - a strategy interface for filtering a 
	group of files.
  	</para>
  	<para>
  	Please refer to the schema for more details on these attributes. 
  	</para>
  	<para>
  	It is also important to understand that <emphasis>FTP Inbound Channel Adapter</emphasis> is a <emphasis>polling consumer</emphasis> and 
  	therefore you must configure a poller (global or local).
    Once the file has been transferred a Message with <classname>java.io.File</classname> being a payload will be generated and sent to the channel 
    identified with <code>channel</code> attribute.
  	</para>
  	<para>
  		<emphasis>More on File Filtering and Large Files</emphasis>
  	</para>
  	<para>
  	Some times the file that just  appeared in the monitored (remote) directory is not complete. Typically such file 
  	will be written with some temporary extension (e.g., foo.txt.writing) and then renamed after the writing process finished. 
  	As a user in most cases you are only interested in files that are complete and would like to filter only files that are complete. 
  	To handle these scenarios use filtering support provided via <code>filename-pattern</code>, <code>filename-regex</code> 
  	and <code>filter</code> attributes. We also provide a convenient Regex-based implementation 
  	<classname>org.springframework.integration.ftp.filters.FtpPatternMatchingFileListFilter</classname>.
	
	<programlisting language="xml"><![CDATA[<int-ftp:inbound-channel-adapter 
			channel="ftpChannel" 
			session-factory="ftpSessionFactory"
			filter="fileNameFilter"
			local-working-directory="file:/my_transfers">
	<int:poller fixed-rate="1000"/>
</int-ftp:inbound-channel-adapter>
	
<bean id="fileNameFilter" 
	class="org.springframework.integration.ftp.filters.FtpPatternMatchingFileListFilt"">
	<constructor-arg value=".*\.txt$"/>
</bean>]]></programlisting>
  	</para>
  </section>
  
  <section id="ftp-outbound">
  	<title>FTP Outbound Channel Adapter</title>
  	
  	<para>
  	<emphasis>FTP Outbound Channel Adapter</emphasis> is a special <classname>MessageHandler</classname> that will connect to the 
  	FTP server and will initiate an FTP transfer for every file it will receive in the payload of the Message. It also supports several 
  	representation of the <emphasis>File</emphasis> so you are not limited only to the File object. <emphasis>FTP Outbound Channel Adapter</emphasis> 
  	supports the following payloads: 1) <classname>java.io.File</classname> - the actual file object; 
  	2) <classname>byte[]</classname> - byte array that represents the file contents; 3) <classname>java.lang.String</classname> - 
  	represents the file contents.
  	
  	<programlisting language="xml"><![CDATA[<int-ftp:outbound-channel-adapter id="ftpOutbound"
				channel="ftpChannel" 
				session-factory="ftpSessionFactory"
				charset="UTF-8"
				filename-generator="fileNameGenerator"/>]]></programlisting>	
				
			
	As you can see form the configuration above you can configure <emphasis>FTP Outbound Channel Adapter</emphasis> via 
	<code>outbound-channel-adapter</code> element while also providing values for various attributes such as <code>filename-generator</code> 
	(implementation of <classname>org.springframework.integration.file.FileNameGenerator</classname>), reference to a <code>client-factory</code>
	 as well as other attributes. Please refer to the schema for more details on these attributes. 
	 <note>
	 By default Spring Integration will use <classname>org.springframework.integration.file.DefaultFileNameGenerator</classname> (if non specified).
	 <classname>DefaultFileNameGenerator</classname> will determine the file name based on the value of the <code>file_name</code> header (if exists) in your 
	 MessageHeaders or if the payload of the Message is <classname>java.io.File</classname>, then it will use the original name of the file.
	 </note>
  	</para>
  	
  </section>
</chapter>
